class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        if(s==t) return true;
        else return false;
    }
};


class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length()!=t.length()) return false;
        unordered_map<char,int> m1;
        unordered_map<char,int> m2;
        for(int i = 0;i<s.length();i++){
            m1[s[i]]++;
        }
        for(int i = 0;i<t.length();i++){
            m2[t[i]]++;
        }
        for(auto x : m1){
            char ch1 = x.first;
            int freq1 = x.second;
            if(m2.find(ch1)!=m2.end()){
                int freq2 = m2[ch1];
                if(freq1!=freq2) return false;
            }
            else return false;
        }
        return true;
    }
};


class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length()!=t.length()) return false;
        unordered_map<char,int> m1;
        for(int i = 0;i<s.length();i++){
            m1[s[i]]++;
        }
        for(int i = 0;i<t.length();i++){
            int ch = t[i];
            if(m1.find(ch)!=m1.end()){
                m1[ch]--;
                if(m1[ch]==0) m1.erase(ch);
            }
            else return false;
        }
        return true;
    }
};
