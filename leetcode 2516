class Solution {
public:
    int takeCharacters(string s, int k) {
        unordered_map<char, int> totalCount;
        for (char c : s) {
            totalCount[c]++;
        }
        if (totalCount['a'] < k || totalCount['b'] < k || totalCount['c'] < k) {
            return -1;
        }
        int n = s.size();
        unordered_map<char, int> windowCount;
        int maxWindowSize = 0;
        int left = 0;

        for (int right = 0; right < n; ++right) {
            windowCount[s[right]]++;
            while (totalCount['a'] - windowCount['a'] < k ||
                   totalCount['b'] - windowCount['b'] < k ||
                   totalCount['c'] - windowCount['c'] < k) {
                windowCount[s[left]]--;
                left++;
            }
            maxWindowSize = max(maxWindowSize, right - left + 1);
        }
        return n - maxWindowSize;
    }
};
