class Solution {
public:
    TreeNode* iop(TreeNode* root){
        TreeNode* pred = root->left;
        while(pred->right!=NULL){
            pred = pred->right;
        }
        return pred;
    }
    TreeNode* ios(TreeNode* root){
        TreeNode* suc = root->right;
        while(suc->left!=NULL){
            suc = suc->left ;
        }
        return suc;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        // leaf node
        if(root==NULL) return NULL;
        if(root->val==key) {
            // leaf node 
            if(root->left==NULL && root->right == NULL) return NULL;
            //case2 one child
            if(root->left==NULL || root->right == NULL) {
                if(root->left!=NULL) return root->left;
                else return root->right;
            }
            // case 3 = 2 child
            if(root->left!=NULL && root->right != NULL){
                // replace the root with its inorder predrecesser // seccesser
                // after replcing delete the predecesser / sucesser
                TreeNode* pred = iop(root);
                root->val = pred->val;
                root->left = deleteNode(root->left,pred->val);
            }
        }
        // node one child

        else if(root->val > key) { // go left
            root->left =  deleteNode(root->left,key);
        }
        else {  // root->val < key go right
            root->right = deleteNode(root->right,key);
        }
        return root;
    }
};
