class Solution {
public:
    void inorder(TreeNode* root,vector<int>& ans){
        if(root==NULL) return; //base case
        inorder(root->left,ans); // call1 left
        ans.push_back(root->val); // print root
        inorder (root->right,ans); // call2 right
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        inorder(root,ans);
        return ans;
    }
};

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        stack<TreeNode*> st;
        TreeNode* node = root;
        while(st.size()>0 || node!=NULL){
            if(node!=NULL){
                st.push(node);
                node = node->left;
            }
            else{
                TreeNode* temp = st.top();
                st.pop();
                ans.push_back(temp->val);
                node = temp->right;
            }
        }
        return ans;
    }
};

important algrothim

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* curr = root;
        while(curr!=NULL){
            if(curr->left!=NULL){ // find the pred
                TreeNode* pred = curr->left;
                while(pred->right!=NULL && pred->right!=curr){
                    pred = pred->right;
                }
                if(pred->right==NULL){ //link
                    pred->right = curr; 
                    curr = curr->left;
                }
                else { // unlick 
                    pred->right = NULL;
                    ans.push_back(curr->val);
                    curr = curr->right;
                }
            }
            else{ 
                ans.push_back(curr->val);
                curr = curr->right;
            }
        }   
        return ans;
    }
};
